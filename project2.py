
# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

#					1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

from functools import lru_cache #LRU CACHE (LEAST REENTLY USED CACHE) used for reduced time taken by excution of program because we are cheacking the condithion upto 4 million..

@lru_cache(maxsize = 1000)
def fib(n):
	if n==1:
		return 1
	elif n==2:
		return 1
	elif n>2:
		return fib(n-1) + fib(n-2)
n=1
sum=0
while True:
	if fib(n)%2==0:
		sum=sum+fib(n)
	if fib(n) >= 4000000:
		break
	n+=1
print(sum)


# YOU CAN SOLVE DIFFERNT WAY ALSO, AS GIVEN BELOW.

first_number=1
next_number=0
sum=0
counter = 0
while True:
	if first_number % 2 == 0:
		sum+=first_number
	if first_number >= 4000000:
		break
	addition = first_number + next_number
	next_number = first_number 
	first_number = addition
	counter+=1
print(sum)
